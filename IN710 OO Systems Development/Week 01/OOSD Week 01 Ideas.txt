Ideas from week 1:
	 What do you need to be object oriented? (In your programming language.)
		- Support for the concept of object/class (encapsulation: keeping
		  data and behaviour together in one neat package, not the same as information hiding)
		- Inheritance
		- Dynamic dispatch (late binding, supports polymorphism)
		- some terminology:
			- subroutines are collections of instructions
			- procedures are subroutines that accept parameters and allow local variable scope
			- functions are procedures that return values
			- methods are functions or procedures that are attached to a particular class				
		
	What is a constructor for?
		- Allocate memory for object
		- Initialise memory for object to some sensible starting values
		- Python lets you overide the __init__ method to provide constructor
		
	What are we trying to care about most in OOSD?
		- We assume you can get the correct result (correctness)
		- We assume you can get it working fast enough (efficiency)
		- In this course we care about whether your code is easy to
		  extend and maintain (good architecture)
		  
	Principles of good design:
		- DRY (Don't Repeat Yourself) and No Magic Numbers (use constants and enums)
		- Robert C. Martin (Uncle Bob): SOLID principles (see Wikipedia article)
		- O from SOLID = Open/Closed principle = Open to extension but closed to modification
		- Make data structures smart but algorithms dumb
		- Upshot: massive switch statements are smelly, because they have to be altered every time
		  a new option is added to the feature requirements
		- Instead: try to decide what to do based on type/polymorphism/data field/overiding
		- Only use inheritance if you can justify that X IS-A Y, otherwise use composition
		  (i.e. don't use inheritance just because you want to collect some features/behaviour together)
		
	Python Support for OO programming:
	    - Classes and methods
		- Inheritance with A(B)
		- Constructor chaining with super() (make data structures smart so algorithms can be dumb)
		- Calling parent's other methods with super()
		- Even though no information hiding, use accessors and mutators to enforce API
		- Note how addition of classes in Pizza example eliminates need for else-if blocks
		- OO modelling not just to create "realistic" view of the domain, but to produce
		  maintainable and extendable architecture